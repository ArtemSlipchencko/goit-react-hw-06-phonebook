{"version":3,"sources":["redux/actions/editContactAction.js","components/Form/Form.jsx","components/Contascts/Contacts.jsx","redux/actions/filterAction.js","components/Filter/Filter.jsx","components/Alert/Alert.jsx","components/App/App.jsx","redux/reducers/editContactReducer.js","redux/reducers/filterReducer.js","redux/store/rootReducer.js","redux/store/store.js","index.js"],"names":["getContact","createAction","deleteContact","Form","state","name","number","handleChange","target","value","setState","handlerSubmit","e","preventDefault","props","checkContact","contacts","contact","newContact","prevState","id","shortId","generate","this","className","onSubmit","htmlFor","onChange","type","Component","mapDispatchToProps","connect","Contacts","TransitionGroup","component","map","el","CSSTransition","timeout","classNames","onClick","filterContact","Filter","handleFilter","filter","Alert","ok","App","showLogo","contactExist","findContact","filterWord","toLowerCase","includes","find","alertOk","prevProps","localStorage","setItem","JSON","stringify","searchedContacts","in","unmountOnExit","init","parse","getItem","editContacts","createReducer","payload","filterContacts","action","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8acc660f.chunk.js","sourcesContent":["// import types from '../types.js';\r\nimport {createAction} from '@reduxjs/toolkit';\r\n\r\nexport const getContact = createAction(\"ADD_CONTACT\");\r\n\r\nexport const deleteContact = createAction(\"DELETE_CONTACT\");\r\n\r\n// export const getContact = ({name, number, id}) => (\r\n//     {\r\n//         type: types.ADD_CONTACT,\r\n//         payload: {\r\n//             name,\r\n//             number,\r\n//             id,\r\n//         }\r\n//     }\r\n// )\r\n\r\n// export const deleteContact = (id) => ({\r\n//     type: types.DELETE_CONTACT,\r\n//     payload: {\r\n//         id,\r\n//     }\r\n// })","import React, {Component} from 'react';\nimport shortId from 'short-id';\nimport './Form.css';\nimport {connect} from 'react-redux';\nimport {getContact} from '../../redux/actions/editContactAction';\n\nclass Form extends Component {\n\n    state = {\n        name: \"\",\n        number: \"\"\n    };\n\n    handleChange = ({target}) => {\n        \n        const {name, value} = target;\n\n        this.setState( {[name]: value} );\n         \n    };\n            \n    handlerSubmit = (e) => {\n\n        e.preventDefault();\n        const {getContact, checkContact, contacts} = this.props;\n        const contact = this.newContact();\n        if(checkContact(contacts, contact) === false) {getContact(contact)};\n        this.setState(prevState => { \n            return {name: '', number: ''}\n        });\n\n    };\n\n    newContact = () => {\n\n        const {name, number} = this.state;\n        return {name: name, number: number, id: shortId.generate()};\n\n    };\n\n    render() {\n\n        const {name, number} = this.state;\n\n        return(\n            <form className=\"form\" onSubmit={this.handlerSubmit}>\n                <label htmlFor=\"contactName\" >Name</label>\n                <input name=\"name\" onChange={this.handleChange} value={name} type=\"text\"/>\n                <label htmlFor=\"contactNumber\" >Number</label>\n                <input name=\"number\" onChange={this.handleChange} value={number} type=\"number\"/>\n                <button type=\"submit\">Add Contact</button>\n            </form>\n        )\n    };\n\n};\n\nconst mapDispatchToProps = {\n    getContact,\n};\n\nconst mapStateToProps = state => ({\n    contacts: state.contacts,\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\nimport './Contacts.css';\nimport {deleteContact} from '../../redux/actions/editContactAction';\nimport {connect} from 'react-redux';\n\nclass Contacts extends Component {\n\n    static propTypes = {\n        contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n        deleteContact: PropTypes.func.isRequired,\n      };\n\n    render() {\n        \n        const {contacts, deleteContact} = this.props;\n        \n        return (\n            <TransitionGroup component=\"ul\">\n\n                {\n                    contacts.map(el => {\n                        return (\n                            <CSSTransition key={el.id} timeout={250} classNames=\"contact\">\n                                <li >{el.name}: {el.number} <button type=\"button\" onClick={() => deleteContact(el.id)}>Delete</button></li>\n                            </CSSTransition>\n                        )\n                    })\n                }\n\n            </TransitionGroup>\n    )}\n\n};\n\nconst mapDispatchToProps = {\n    deleteContact,\n};\n\nexport default connect(null, mapDispatchToProps)(Contacts);","// import types from '../types.js';\r\nimport {createAction} from '@reduxjs/toolkit';\r\n\r\nexport const filterContact = createAction(\"FILTER_CONTACTS\");\r\n\r\n// export const filterContact = (filter) => ({\r\n//     type: types.FILTER_CONTACTS,\r\n//     payload: {\r\n//         filter,\r\n//     }\r\n// })","import React, { Component } from 'react';\nimport './Filter.css';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {filterContact} from '../../redux/actions/filterAction';\n\nclass Filter extends Component { \n\n  static propTypes = {\n    filter: PropTypes.string,\n  };\n\n  state = {\n    value: \"\",\n  };\n\n  handleFilter = (e) => {\n\n    const filter = e.target.value;\n    this.setState({value: filter})\n    this.props.filterContact(filter);\n\n  };\n  \n  render () {\n\n    const {filter} = this.props;\n\n    return (\n\n        <div className=\"input\">\n                <input type=\"text\" onChange={this.handleFilter} value={this.state.value} />\n        </div>\n\n    );\n  };\n};\n\nconst mapDispatchToProps = {\n  filterContact,\n}\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\n\nconst Alert = (props) => { \n\n  return (\n    <div><h2>This contact is already exist!</h2><button onClick={props.ok}>OK</button></div>\n  )\n  \n};\n\nexport default Alert;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Form from '../Form/Form';\nimport Contacts from '../Contascts/Contacts';\nimport Filter from '../Filter/Filter';\nimport Alert from '../Alert/Alert';\nimport {CSSTransition} from 'react-transition-group';\nimport {connect} from 'react-redux';\n\nclass App extends Component {\n\n    state = {\n        showLogo: false,\n        filter: '',\n        contactExist: false\n    };\n\n    componentDidMount() {\n        this.setState(state => ({showLogo: !state.showLogo}));\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        localStorage.setItem('contacts', JSON.stringify(this.props.contacts));\n    };\n\n    findContact = () => {\n        const {contacts, filterWord} = this.props;\n            return contacts.filter(contact => contact.name.toLowerCase().includes(filterWord.toLowerCase()),\n        );\n    };\n\n    checkContact = (contacts, contact) => {\n\n        if (contacts.find((el) => el.name === contact.name)) {\n            this.setState({contactExist: true}) \n            return true;\n        };\n\n        return false;\n        \n    };\n\n    alertOk = () => {\n        this.setState({contactExist: false})\n    };\n\n    render() {\n\n        const {filter, showLogo, contactExist} = this.state;\n        const searchedContacts = this.findContact();\n\n        return (\n            <>\n                <CSSTransition in={showLogo} unmountOnExit classNames=\"logo\" timeout={500}>\n                    <h1>Phonebook</h1>\n                </CSSTransition>\n                <h2>Contacts form</h2>\n                <Form checkContact={this.checkContact} />\n                <h2>Contacts list</h2>\n                <Filter filter={filter} handleFilter={this.handleFilter} />\n                <Contacts contacts={searchedContacts} />\n                <CSSTransition in={contactExist} unmountOnExit classNames=\"alert\" timeout={250}>\n                    <Alert ok={this.alertOk} />\n                </CSSTransition>\n            </>\n        );\n\n    };\n\n};\n\nconst mapStateToProps = state => ({\n    contacts: state.contacts,\n    filterWord: state.filter,\n});\n\nexport default connect(mapStateToProps, null)(App);","// import types from '../types.js';\r\nimport {getContact, deleteContact} from '../actions/editContactAction';\r\nimport {createReducer} from '@reduxjs/toolkit';\r\n\r\n\r\nconst init = JSON.parse(localStorage.getItem('contacts')) || [];\r\n\r\nexport const editContacts = createReducer(init, {\r\n    [getContact.type]: (state, {payload}) => ( [...state, {...payload}]),\r\n    [deleteContact.type]: (state, {payload}) => (state.filter(contact => contact.id !== payload))\r\n})\r\n\r\n// export const editContacts = (state = init, {type, payload}) => {\r\n//     switch (type) {\r\n//         case types.ADD_CONTACT:\r\n//             return [...state, {...payload}];\r\n//         case types.DELETE_CONTACT:\r\n//             return state.filter(contact => contact.id !== payload.id)\r\n//         default:\r\n//             return state; \r\n//     }\r\n// }","// import types from '../types.js';\r\nimport {filterContact} from '../actions/filterAction';\r\nimport {createReducer} from '@reduxjs/toolkit';\r\n\r\n// const init = \"\";\r\n\r\nexport const filterContacts = createReducer(\"\", {\r\n    [filterContact.type]: (state, action) => action.payload\r\n});\r\n\r\n// export const filterContacts = (state = init, {type, payload}) => {\r\n//     switch (type) {\r\n//         case types.FILTER_CONTACTS:\r\n//             return payload.filter;\r\n//         default:\r\n//             return state; \r\n//     }\r\n// }","import {combineReducers} from 'redux';\r\nimport {editContacts} from '../reducers/editContactReducer';\r\nimport {filterContacts} from '../reducers/filterReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    contacts: editContacts,\r\n    filter: filterContacts,\r\n})\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport rootReducer from './rootReducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n  \r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/store\";\n\nReactDOM.render(\n  <Provider store={store} >\n  <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}